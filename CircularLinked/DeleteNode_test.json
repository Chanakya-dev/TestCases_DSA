{
  "code": "class Node:\n    def __init__(self, data):\n        self.data = data  # Initialize the data for the node\n        self.next = None  # Initialize the next pointer\n\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None  # Initialize the head of the list\n\n    def delete_node(self, key):\n        if not self.head:\n            print('List is empty. Deletion cannot be performed.')\n            return\n\n        if self.head.data == key:\n            if self.head.next == self.head:\n                self.head = None\n            else:\n                last_node = self.head\n                while last_node.next != self.head:\n                    last_node = last_node.next\n                last_node.next = self.head.next\n                self.head = self.head.next\n            return\n\n        current = self.head\n        while current.next != self.head:\n            if current.next.data == key:\n                current.next = current.next.next\n                return\n            current = current.next\n        print(f'Node with data {key} not found.')",
  "language": "python",
  "test_cases": [
    {
      "description": "Test deleting the head node when there is one node",
      "function_name": "delete_node",
      "input": [10],
      "initial_state": {
        "cll": [10]
      },
      "expected": "List is empty. Deletion cannot be performed.",
      "name": "Delete head node when there is one node"
    },
    {
      "description": "Test deleting the head node when there are multiple nodes",
      "function_name": "delete_node",
      "input": [10],
      "initial_state": {
        "cll": [10, 20, 30]
      },
      "expected": "20 -> 30 -> 20 (Back to head)",
      "name": "Delete head node when there are multiple nodes"
    },
    {
      "description": "Test deleting a non-head node",
      "function_name": "delete_node",
      "input": [30],
      "initial_state": {
        "cll": [10, 20, 30]
      },
      "expected": "10 -> 20 -> 10 (Back to head)",
      "name": "Delete non-head node"
    },
    {
      "description": "Test trying to delete a non-existent node",
      "function_name": "delete_node",
      "input": [40],
      "initial_state": {
        "cll": [10, 20, 30]
      },
      "expected": "Node with data 40 not found.",
      "name": "Try to delete non-existent node"
    },
    {
      "description": "Test deleting all nodes one by one",
      "function_name": "delete_node",
      "input": [10],
      "initial_state": {
        "cll": [10, 20, 30]
      },
      "expected": "20 -> 30 -> 20 (Back to head)",
      "name": "Delete first node"
    },
    {
      "description": "Test deleting last remaining node",
      "function_name": "delete_node",
      "input": [30],
      "initial_state": {
        "cll": [20, 30]
      },
      "expected": "List is empty. Deletion cannot be performed.",
      "name": "Delete last node"
    }
  ]
}
